#include "../../common/message/SDMxTEDS.h"
#include "../../common/message/SDMSubreqst.h"
#include "../../common/message/SDMDeletesub.h"
#include "../../common/message/SDMCancelxTEDS.h"
#include "../../common/SubscriptionManager/SubscriptionManager.h"
#include "../../common/MessageManager/MessageManager.h"
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void RegisterxTEDS();
void CancelxTEDS();
void* Publisher(void *);
void* Listener(void *);

SubscriptionManager subscriptions;
pthread_mutex_t subscription_mutex = PTHREAD_MUTEX_INITIALIZER;
long my_port;

int main(int argc,char** argv)
{
	pthread_t ListenerThread;
	pthread_t PublisherThread;

	SDMInit(argc,argv);
	my_port = getPort();
	pthread_create(&ListenerThread,NULL,&Listener,NULL);
	RegisterxTEDS();
	pthread_create(&PublisherThread,NULL,&Publisher,NULL);
	pthread_join(PublisherThread,NULL);
	CancelxTEDS();
	pthread_cancel(ListenerThread);
	pthread_join(ListenerThread,NULL);
}

void* Publisher(void * args)
{
	int published = 0;
	char data[20];
    double timestamp = 1;
    float x = 1.0;
	float y = 2.0;
    float z = 3.0;
	while(published < 100)
	{
		memcpy(data,&timestamp,8);
		x = 1.31*(float)(rand()&0xFFFF);
		y = 2.35*(float)(rand()&0xFFFF);
		z = 3.21*(float)(rand()&0xFFFF);
		printf("time:%f\tX:%f\tY:%f\tZ:%f\t\n",timestamp,x,y,z);
		memcpy(&data[8],&x,4);
		memcpy(&data[12],&y,4);
		memcpy(&data[16],&z,4);
		pthread_mutex_lock(&subscription_mutex);
		if (subscriptions.Publish(1,126,data,20)) published++;
		pthread_mutex_unlock(&subscription_mutex);
		sleep(1);
		timestamp++;
	}
	return NULL;
}

void* Listener(void * args)
{
	char buf[BUFSIZE];
	SDMSubreqst sub;
	SDMDeletesub del;
	MessageManager mm;
	mm.Async_Init(my_port);
	while(1)
	{
		pthread_testcancel();
		if(mm.IsReady())
		{
			switch(mm.GetMessage(buf))
			{
			case SDM_Subreqst:
				sub.Unmarshal(buf);
				pthread_mutex_lock(&subscription_mutex);
				subscriptions.AddSubscription(sub);
				pthread_mutex_unlock(&subscription_mutex);
				break;
			case SDM_Deletesub:
				del.Unmarshal(buf);
				pthread_mutex_lock(&subscription_mutex);
				subscriptions.RemoveSubscription(del);
				pthread_mutex_unlock(&subscription_mutex);
				break;
			default:
				printf("Invalid Message found!\n");
				fflush(NULL);
				break;
			}
		}
		else
		{
			usleep(100000);
		}
	}
	return NULL;
}

void RegisterxTEDS()
{
	SDMxTEDS  xteds;	// create an xTEDS registration message

	strcpy (xteds.xTEDS,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--Sample XML file generated by XMLSpy v2005 rel. 3 U (http://www.altova.com)-->\n<xTEDS xmlns=\"http://www.interfacecontrol.com/SPA/xTEDS\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"	xsi:schemaLocation=\"http://www.interfacecontrol.com/SPA/xTEDS xTEDS.xsd\" name=\"String\" version=\"2.0\" description=\"Text\">\n\t<Device name=\"BillingsleyTFM100S\" id=\"123\" kind=\"Magnetometer\" qualifier=\"3 AXIS\" description=\"Billingsley TFM100S Magnetometer\" powerRequirements=\".6\" directionXYZ=\"Text\" referenceFrequency=\"Text\" sensitivityAtReference=\"Text\" calDueDate=\"2006-05-25\" referenceTemperature=\"Text\" serialNumber=\"Text\" manufacturerId=\"Billingsley\" electricalOutput=\"Text\" measurementRange=\"Text\" qualityFactor=\"Text\" versionLetter=\"S\" modelId=\"TFM100\" calibrationDate=\"2005-05-25\" temperatureCoefficient=\"Text\" componentKey=\"MagTest\" SPA_U_hub=\"PanelNegZ_HubA\" SPA_U_port=\"1\"/>\n\t<Interface name=\"MAGNETOMETER_INTERFACE\" id=\"1\">\n\t<!-- raw counts -->\n\t\t<Variable name=\"Field_X_Raw\" kind=\"Magnetic_Field\" qualifier=\"X Axis Device Frame\" description=\"Raw Voltage from Magnetic Field X Sensor Frame\" accuracy=\"0.005\" defaultValue=\"0\" format=\"UINT16\" length=\"1\" units=\"Counts\" precision=\"2\" rangeMin=\"0\" rangeMax=\"10\"/>\n\t\t<Variable name=\"Field_Y_Raw\" kind=\"Magnetic_Field\" qualifier=\"Y Axis Device Frame\" description=\"Raw Voltage from Magnetic Field Y Sensor Frame\" accuracy=\"0.005\" defaultValue=\"0\" format=\"UINT16\" length=\"1\" units=\"Counts\" precision=\"2\" rangeMin=\"0\" rangeMax=\"10\"/>\n\t\t<Variable name=\"Field_Z_Raw\" kind=\"Magnetic_Field\" qualifier=\"Z Axis Device Frame\" description=\"Raw Voltage from Magnetic Field Z Sensor Frame\" accuracy=\"0.005\" defaultValue=\"0\" format=\"UINT16\" length=\"1\" units=\"Counts\" precision=\"2\" rangeMin=\"0\" rangeMax=\"10\"/>\n\t<!-- Gauss -->\n\t\t<Variable name=\"Field_X\" kind=\"Magnetic_Field\" qualifier=\"X Axis Device Frame\" description=\"Magnetic Field X Sensor Frame\" accuracy=\"0.005\" defaultValue=\"0.0\" format=\"FLOAT32\" length=\"1\" units=\"Gauss\" precision=\"2\" rangeMin=\"0\" rangeMax=\"10.0\"/>\n\t\t<Variable name=\"Field_Y\" kind=\"Magnetic_Field\" qualifier=\"Y Axis Device Frame\" description=\"Magnetic Field Y Sensor Frame\" accuracy=\"0.005\" defaultValue=\"0.0\" format=\"FLOAT32\" length=\"1\" units=\"Gauss\" precision=\"2\" rangeMin=\"0\" rangeMax=\"10.0\"/>\n\t\t<Variable name=\"Field_Z\" kind=\"Magnetic_Field\" qualifier=\"Z Axis Device Frame\" description=\"Magnetic Field Z Sensor Frame\" accuracy=\"0.005\" defaultValue=\"0.0\" format=\"FLOAT32\" length=\"1\" units=\"Gauss\" precision=\"2\" rangeMin=\"0\" rangeMax=\"10.0\"/>\n\t<!-- data rate -->\n\t\t<Variable name=\"Data_Rate\" kind=\"Magnetic_Field\" qualifier=\"Message Rate\" description=\"Data rate\" accuracy=\"1\" defaultValue=\"1\" format=\"UINT16\" length=\"1\" units=\"Hz\" precision=\"1\" rangeMin=\"1\" rangeMax=\"1000\"/>\n\t<!-- calibration -->\n\t\t<Variable name=\"Calibration_CurveX\" kind=\"Magnetic_Field\" qualifier=\"Polynomial\" description=\"Cal Curve X Polynomial\" defaultValue=\"0,1,0\" format=\"FLOAT32\" length=\"3\" precision=\"3\"/>\n\t\t<Variable name=\"Calibration_CurveY\" kind=\"Magnetic_Field\" qualifier=\"Polynomial\" description=\"Cal Curve Y Polynomial\" defaultValue=\"0,1,0\" format=\"FLOAT32\" length=\"3\" precision=\"3\"/>\n\t\t<Variable name=\"Calibration_CurveZ\" kind=\"Magnetic_Field\" qualifier=\"Polynomial\" description=\"Cal Curve Z Polynomial\" defaultValue=\"0,1,0\" format=\"FLOAT32\" length=\"3\" precision=\"3\"/>\n\t<!-- timestamp -->\n\t\t<Variable name=\"Timestamp\" kind=\"Magnetic_Field\" qualifier=\"Time\" description=\"Sample Time\" accuracy=\"0.001\" defaultValue=\"0.0\" format=\"FLOAT64\" length=\"1\" units=\"seconds\" precision=\"2\" rangeMin=\"0\"/>\n\t<!-- request messages -->\n\t\t<Request>\n\t\t\t<CommandMsg name=\"SetCalibration\" description=\"Text\" id=\"123\">\n\t\t\t\t<VariableRef name=\"Calibration_CurveX\"/>\n\t\t\t\t<VariableRef name=\"Calibration_CurveY\"/>\n\t\t\t\t<VariableRef name=\"Calibration_CurveZ\"/>\n\t\t\t</CommandMsg>\n\t\t\t<DataReplyMsg name=\"CalibrationData\" description=\"TFM100S Calibration Data\" id=\"127\">\n\t\t\t\t<VariableRef name=\"Timestamp\"/>\n\t\t\t\t<VariableRef name=\"Calibration_CurveX\"/>\n\t\t\t\t<VariableRef name=\"Calibration_CurveY\"/>\n\t\t\t\t<VariableRef name=\"Calibration_CurveZ\"/>\n\t\t\t</DataReplyMsg>\n\t\t</Request>\n\t<!-- notification messages -->\n\t\t<Notification>\n\t\t\t<DataMsg name=\"RawData\" description=\"TFM100S Magnetometer Raw Counts\" msgArrival=\"PERIODIC\" id=\"125\">\n\t\t\t\t<VariableRef name=\"Timestamp\"/>\n\t\t\t\t<VariableRef name=\"Field_X_Raw\"/>\n\t\t\t\t<VariableRef name=\"Field_Y_Raw\"/>\n\t\t\t\t<VariableRef name=\"Field_Z_Raw\"/>\n\t\t\t</DataMsg>\n\t\t</Notification>\n\t\t<Notification>\n\t\t\t<DataMsg name=\"MagFieldData\" description=\"TFM100S Magnetometer Fields\" msgArrival=\"PERIODIC\" id=\"126\">\n\t\t\t\t<VariableRef name=\"Timestamp\"/>\n\t\t\t\t<VariableRef name=\"Field_X\"/>\n\t\t\t\t<VariableRef name=\"Field_Y\"/>\n\t\t\t\t<VariableRef name=\"Field_Z\"/>\n\t\t\t</DataMsg>\n\t\t</Notification>\n\t<!-- command messages -->\n\t\t<Command>\n\t\t\t<CommandMsg name=\"SetDataRate\" description=\"Text\" id=\"124\">\n\t\t\t\t<VariableRef name=\"Data_Rate\"/>\n\t\t\t</CommandMsg>\n\t\t</Command>\n\t</Interface>\n</xTEDS>");	// set xTEDS

	xteds.source.setSensorID(1);		// set the id of this application
	xteds.source.setPort(my_port);
	printf("Registering producer xTEDS on port %ld\n",my_port);
	xteds.Send();				// register with the SDM
}

void CancelxTEDS()
{
	SDMCancelxTEDS cancel;
	printf("Canceling xTEDS\n");
	cancel.source.setSensorID(1);
	cancel.source.setPort(my_port);
	cancel.Send();
}
