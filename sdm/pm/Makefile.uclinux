ifndef PETALINUX
$(error You must source the petalinux/settings.sh script before working with PetaLinux)
endif

# Point to default PetaLinux root directory
ifndef ROOTDIR
ROOTDIR=$(PETALINUX)/software/petalinux-dist
endif

PATH:=$(PATH):$(ROOTDIR)/tools

UCLINUX_BUILD_USER = 1
-include $(ROOTDIR)/.config
-include $(ROOTDIR)/$(CONFIG_LINUXDIR)/.config
LIBCDIR = $(CONFIG_LIBCDIR)
-include $(ROOTDIR)/config.arch
ROMFSDIR=$(ROOTDIR)/romfs
ROMFSINST=$(ROOTDIR)/tools/romfs-inst.sh

PM = pm
PM_IDS = pm_ids
PM_MONITOR = pm_monitor

# Add any other object files to this list below
PM_IDS_OBJS = pm_ids.o pm_main_ids.o PMProcess.o PMProcessList.o PendingTask.o
PM_OBJS = pm.o pm_main.o PMProcess.o PMProcessList.o PendingTask.o
PM_MONITOR_OBJS = pm_monitor.o

FLTFLAGS+=-s 262144
export FLTFLAGS

LDLIBS += -lSDM -lpthread -lstdc++
LDFLAGS += -L../common/
all: $(PM) $(PM_IDS) $(PM_MONITOR)

$(PM): $(PM_OBJS)
	$(CXX) $(LDFLAGS) -o $@ $(PM_OBJS) $(LDLIBS)
	cp $@ ../../FLIGHT_BINARIES/

$(PM_IDS): $(PM_IDS_OBJS)
	$(CXX) $(LDFLAGS) -o $@ $(PM_IDS_OBJS) $(LDLIBS)
	cp $@ ../../FLIGHT_BINARIES/

$(PM_MONITOR): $(PM_MONITOR_OBJS)
	$(CXX) $(LDFLAGS) -o $@ $(PM_MONITOR_OBJS) $(LDLIBS)
	cp $@ ../../FLIGHT_BINARIES/

pm_main_ids.o: pm_main.cpp pm.h
	$(CXX) -c $(CXXFLAGS) -DBUILD_FOR_IDS -o $@ $<

pm_ids.o: pm_ids.cpp pm_ids.h
	$(CXX) -c $(CXXFLAGS) -DBUILD_FOR_IDS -o $@ $<

clean:
	-rm -f $(PM) $(PM_IDS) $(PM_MONITOR) *.elf *.gdb *.o

romfs:
	$(ROMFSINST) $(PM) /bin/$(PM)
	$(ROMFSINST) $(PM_IDS) /bin/$(PM_IDS)
	$(ROMFSINST) $(PM_MONITOR) /bin/$(PM_MONITOR)

%.o: %.cpp
	$(CXX) -c $(CXXFLAGS) -o $@ $<


# Targets for the required .config files - if they don't exist, the tree isn't
# configured.  Tell the user this, how to fix it, and exit.
${ROOTDIR}/config.arch ${ROOTDIR}/.config:
	@echo "Error: You must configure the PetaLinux tree before compiling your application"
	@echo ""
	@echo "Change directory to ../../petalinux-dist and 'make menuconfig' or 'make xconfig'"
	@echo ""
	@echo "Once the tree is configured, return to this directory, and re-run make."
	@echo ""
	@exit -1

